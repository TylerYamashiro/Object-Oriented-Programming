//AUTHOR: Tyler Yamashiro
//FILENAME: numMixer.cs
//DATE: 4/9/18
//REVISION HISTORY: VERSION 2.0
//PLATFORM(compiler,version): 
/*DESCRIPTION:
 *  This class is a number mixer at the begining when the object is initiated
 *  the default maximum amount of numbers is 10.  A parameter can be passed
 *  into the constructor to increase the pool of numbers created
 *  additionally  These numbers are stored in an array.  
 *  The object starts in a mixed state return all odd and even 
 *  numbers when pinged.
 *  When the object is pinged if the state is odd it returns all odd numbers.
 *  If even it returns all even numbers as an array. If the object
 *  is active it will
 *  return the numbers as an array if it is not active return null.
 *  The state of the object can be changed to even, odd, and mixed 
 *  by calling the appropriate member functions.  
 *  The state change is counted and the user can 
 *  call a function to get the number of times the 
 *  state of the object has changed.
 */

 /*ASSUMPTIONS: The object is active and in state mix when initiated.  
  * The way the state changes is not random
  * but by programmer choice.  The object has a max threshHold of 10 
  * pings after 10 pings the object becomes inactive.  
  * The initial number pool will be held in an array 
  * with a default of 10 numbers.  
  * When pinged in mix state will return all numbers in the pool.
  */
  /*Class Invariant: numMixer:
   * Pool of numbers is stable unless seed is changed when 
   * constructor is called. When inactive ping returns null.
   * When active ping returns an integer array.  Object can be 
   * re-created to have active again.
   * 
   * Interface Invariant: numMixer:
   * Instantiation does not require any arguments.  An optional argument
   * exists named seed that can spawn a different pool of numbers than 
   * the default.  In the argument constructor 2 arguments can be passed.
   * the first is the size of the initial pool of numbers the second
   * is the seed for generation. An inactive object will not become 
   * active again.  Inactive objects return null.  Object states
   * for Odd, Even and Mix may be set by the user using given setter
   * functions. State is Mix by default 
   * Integers are returned via integer arrays.
   * 
   * Implementation Invariant: numMIxer:
   * The default seed can be changed using POOLSEED const int. The 
   * default threshHold can be changed using THRESHMAX.  The default 
   * number pool size can be changed by changing STORELENGTH.  The number
   * generator is located in buildStore() and is a basically a fibbanacci 
   * sequence that starts at the seed given. Active determined by comparing
   * threshHold and THRESHMAX in isActive()
   *
   */
using System;
namespace p2
{
    public class numMixer
    {
        //Private class members=-------------------------------------
        //default seed for generating number pool
        private const int POOLSEED = 1;
        //seed used for numbers generated by the build store object
        private int seedPool;
        private int threshHold;
        private int[] result;
        private const int THRESHMAX = 10;
        private int stateChangeCounter;
        private int[] store;
        private const int STORELENGTH = 10;
        private enum State { Odd, Even, Mix };
        private State currentState;
        //the length of the array that holds the starting number 
        //designated by user
        private uint userLength;

        //Description: The destructor for the numMixer object 
        //reclaims resources
        //Precondition: A numMixer object exists
        //PostCondition: The numMixer object no longer exists
        ~numMixer() { }

        //Description: Fills the array that acts as a pool of numbers with
        //a fibbonacci sequence like functions that uses the seed 
        //provided or a default seed as beginning point
        //Precondtion: A array has been successfully created as part of 
        //the numMixer object that has greater than zero capacity
        //Postcondition: The array is filled with seeded numbers

        private void buildStore()
        {
            int oldNum = seedPool;
            int currentNum = seedPool;
            int nextNum;
            for (int i = 0; i < store.Length; i++)
            {
                nextNum = currentNum + oldNum;
                oldNum = currentNum;
                currentNum = nextNum;
                store[i] = nextNum;
            }
        }
        //Description: Depending on state of the object return odd, even,
        //or mixed integers from the number pool.  If the object is not active 
        //return null. If there are no evens or are no odds returns null.
        //Precondition: Array filled with integers exists as a pool of integers
        //Postcondition: Array is returned depending on the state 
        //of the object or null is returned if the ping is to return nothing
        //or fail
        private int[] returnPingHelper()
        {
            int oddCount = 0;
            int evenCount = 0;
            int indexCount = 0;
            for (int i = 0; i < store.Length; i++)
            {
                if (store[i] % 2 == 0)
                    evenCount++;
                else
                    oddCount++;
            }
            if (currentState == State.Odd)
            {
                result = new int[oddCount];
                for (int i = 0; i < store.Length; i++)
                {
                    if (store[i] % 2 == 1)
                    {
                        result[indexCount] = store[i];
                        indexCount++;
                    }
                }
            }
            else if (currentState == State.Even)
            {
                result = new int[evenCount];
                for (int i = 0; i < store.Length; i++)
                {
                    if (store[i] % 2 == 0)
                    {
                        result[indexCount] = store[i];
                        indexCount++;
                    }
                }
            }
            else
            {
                result = new int[store.Length];
                for (int i = 0; i < store.Length; i++)
                {
                    result[i] = store[i];
                }
            }

            if (isActive())
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        //Description: Increments the threshHold variable.
        private void incThreshHold()
        {
            threshHold++;
        }


        //----------Pubic class members--------------------------

        //Description: Default constrctor for the object.  Creates
        //the array to hold numbers and fills it using buildStore()
        //Precondition: A numMixer object is to be made
        //Postcondition: A numMixer object is made
        public numMixer(int seed = POOLSEED)
        {
            seedPool = seed;
            if (seed <= 0)
            {
                seedPool = POOLSEED;
            }
            store = new int[STORELENGTH];
            buildStore();
            userLength = STORELENGTH;
            threshHold = 0;
            stateChangeCounter = 0;

        }
        //Description: Constructor that takes a custom length that
        //determines the size of the number pool. The user can
        //also fill an optional argument to change the seed
        //of the origonal pool of numbers
        //Precondition: NumMixer object is to be made with an array
        //of size customLength in order to store numbers
        //the parameter must be more than 0.  The seed must also
        //be greater than zero.
        //Postcondition: Object will have an array of user 
        //designated size filled with integers according to
        //a provided or default seed
        public numMixer(uint customLength,int seed = POOLSEED)
        {
           
            seedPool = seed;
            if (seed <= 0)
            {
                seedPool = POOLSEED;
            }
            userLength = customLength;
            store = new int[customLength];
            buildStore();
        }
        //Description: Copy Constructor that takes a numMixer object as
        //an argument and copies its number pool, state, and threshHold
        //Precondition: A numMixer object exists and is to be copied
        //PostCondition: A copy of the numMixer object is created
        public numMixer(numMixer prevNumMixer)
        {
            userLength = prevNumMixer.userLength;
            seedPool = prevNumMixer.seedPool;
            store = new int[userLength];
            threshHold = prevNumMixer.threshHold;
            currentState = prevNumMixer.currentState;
            stateChangeCounter = prevNumMixer.stateChangeCounter;
            for (int i = 0; i < userLength; i++)
            {
                store[i] = prevNumMixer.store[i];
            }

        }
        //Description: Calls return ping to return an array of ints
        //depending on the state of the object.  Increases the threshold by one
        //and returns the result of returnPing.  If the object is inactive it 
        //returns NULL.
        //Precondition: An array of numbers exists and is filled with integers
        public int[] ping()
        {
            int[] returnPing;
            incThreshHold();
            returnPing = returnPingHelper();
            return returnPing;
        }
        //Description: Set the currentStat to Odd and increment the
        //stateChangeCounter
        public void setStateOdd()
        {
            currentState = State.Odd;
            stateChangeCounter++;
        }
        //Description: Set the currentState to Mix and increment the 
        //stateChangeCounter
        public void setStateEven()
        {
            currentState = State.Even;
            stateChangeCounter++;
        }
        //Description: Set the currentState to Mix and increment the 
        //stateChangeCounter
        public void setStateMix()
        {
            currentState = State.Mix;
            stateChangeCounter++;
        }
        //Description: Returns the number of times the state has changed.
        public int returnStateCount()
        {
            return stateChangeCounter;
        }
        //Description: Returns a bool based of in the threshHold 
        //is greater than or equal to the maximum threshHold
        public bool isActive()
        {
            return (threshHold < THRESHMAX);
        }
    }
}